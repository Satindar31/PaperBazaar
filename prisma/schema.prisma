datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Grade {
    grade    Int    @id
    students User[]

    Question Question[]

    subjects GradeToSubject[]
}

model Subject {
    id   Int    @id @default(autoincrement())
    name String

    grades   GradeToSubject[]
    Question Question[]

    User User[] @relation("UserSubjects")

    Bet Bet[]
}

model GradeToSubject {
    grade     Grade   @relation(fields: [gradeId], references: [grade])
    subject   Subject @relation(fields: [subjectId], references: [id])
    gradeId   Int
    subjectId Int

    @@id([gradeId, subjectId])
}

model Question {
    id      Int     @id @default(autoincrement())
    text    String
    grade   Grade   @relation(fields: [gradeId], references: [grade])
    subject Subject @relation(fields: [subjectId], references: [id])
    set     Int     @default(0)
    inExam  Boolean @default(false)

    gradeId   Int
    subjectId Int

    Bet Bet[]
}

model Bet {
    id        Int      @id @default(autoincrement())
    userId    String
    amount    Float
    set       Int      @default(0)
    question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    subject   Subject?  @relation(fields: [subjectId], references: [id])
    subjectId Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    questionId Int
    user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    gradeId  Int?
    grade    Grade?    @relation(fields: [gradeId], references: [grade])
    dob      DateTime?
    admin    Boolean   @default(false)
    Bets     Bet[]
    subjects Subject[] @relation("UserSubjects")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Auth stuff

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
